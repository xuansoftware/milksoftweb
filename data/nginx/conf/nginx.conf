
#user  nobody;

# worker_processes 定义了nginx对外提供web服务时的worder进程数.
# 将其设置为可用的CPU内核数将是一个好的开始（设置为“auto”将尝试自动检测它）
worker_processes  auto;

# error_log 告诉nginx只能记录严重的错误
error_log  /home/andy/root/logs/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

# worker_rlimit_nofile 更改worker进程的最大打开文件数限制
worker_rlimit_nofile 1000000;

events {
    # worker_connections设置可由一个worker进程同时打开的最大连接数
    worker_connections  2048;

    # multi_accept 告诉nginx收到一个新连接通知后接受尽可能多的连接
    multi_accept on;

    # 设置用于复用客户端线程的轮询方法
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)
    #access_log  logs/access.log  main;

    # 可以关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的
    server_tokens off;

    # 可以让sendfile()发挥作用。sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)
    sendfile        on;

    # tcp_nopush 告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送
    #tcp_nopush     on;

    # tcp_nodelay 告诉nginx不要缓存数据，而是一段一段的发送–当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值
    #tcp_nodelay on

    # keepalive_timeout 给客户端分配keep-alive链接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  90;

    # reset_timeout_connection告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间
    reset_timedout_connection on;

    # gzip是告诉nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量
    gzip on;

    # gzip_min_length设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。
    gzip_min_length 1000;

    # gzip_proxied允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。
    gzip_proxied any;

    upstream milk_servers {
        server 127.0.0.1:9001;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    #proxy_pass_header Server;
        #    proxy_set_header Host $http_host;
        #    proxy_redirect off;
        #    #用来获取用户ip
        #    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Scheme $scheme;
        #    proxy_pass http://milk_servers;
        #}

        location / {
            root   html;
            index  index.html index.htm;
        }

	    location ^~ /static/ {
	        root /root/milksoftweb/static/;
	    }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
        listen 443;
        server_name localhost;
        ssl on;
        root html;
        index index.html index.htm;
        ssl_certificate   213946794940857.pem;
        ssl_certificate_key  213946794940857.key;
        ssl_session_timeout 5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        location / {
            root html;
            index index.html index.htm;
        }
    }

}
